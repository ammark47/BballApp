(function() {
  var ModuleNameParser, RequiredModuleFinder, _, async, coffeeScript, detective, fs, glob, path;

  _ = require('lodash');

  async = require('async');

  coffeeScript = require('coffee-script');

  detective = require('detective');

  glob = require('glob');

  fs = require('fs');

  ModuleNameParser = require('./module_name_parser');

  path = require('path');

  RequiredModuleFinder = (function() {
    function RequiredModuleFinder(arg) {
      this.ignoreFilePatterns = arg.ignoreFilePatterns, this.stripLoaders = arg.stripLoaders;
    }

    RequiredModuleFinder.prototype.find = function(dir, done) {
      return async.waterfall([
        (function(_this) {
          return function(next) {
            return glob('**/*.{coffee,js}', {
              cwd: dir,
              ignore: _this.ignoreFilePatterns
            }, next);
          };
        })(this), (function(_this) {
          return function(files, next) {
            var iterator;
            iterator = function(filePath, cb) {
              return _this.findInFile({
                dir: dir,
                filePath: filePath
              }, cb);
            };
            return async.concat(files, iterator, next);
          };
        })(this)
      ], done);
    };

    RequiredModuleFinder.prototype.findInFile = function(arg, done) {
      var dir, filePath;
      dir = arg.dir, filePath = arg.filePath;
      return async.waterfall([
        function(next) {
          return fs.readFile(path.join(dir, filePath), {
            encoding: 'utf8'
          }, next);
        }, (function(_this) {
          return function(content, next) {
            return _this.compile({
              content: content,
              filePath: filePath
            }, next);
          };
        })(this), (function(_this) {
          return function(content, next) {
            return _this.findInContent({
              content: content,
              filePath: filePath
            }, next);
          };
        })(this), (function(_this) {
          return function(moduleNames, next) {
            return next(null, _this.normalizeModuleNames({
              filePath: filePath,
              moduleNames: moduleNames
            }));
          };
        })(this)
      ], done);
    };

    RequiredModuleFinder.prototype.compile = function(arg, done) {
      var content, filePath;
      content = arg.content, filePath = arg.filePath;
      if (path.extname(filePath) === '.coffee') {
        return this.compileCoffeescript({
          content: content,
          filePath: filePath
        }, done);
      } else {
        return done(null, content);
      }
    };

    RequiredModuleFinder.prototype.compileCoffeescript = function(arg, done) {
      var content, err, error, filePath, result;
      content = arg.content, filePath = arg.filePath;
      try {
        result = coffeeScript.compile(content, {
          filename: filePath
        });
      } catch (error) {
        err = error;
        return done(err);
      }
      return done(null, result);
    };

    RequiredModuleFinder.prototype.findInContent = function(arg, done) {
      var content, err, error, filePath, result;
      content = arg.content, filePath = arg.filePath;
      try {
        result = detective(content, {
          isRequire: this.isRequire
        });
      } catch (error) {
        err = error;
        err.message = filePath + ": " + err.message;
        return done(err);
      }
      return done(null, result);
    };

    RequiredModuleFinder.prototype.isRequire = function(arg) {
      var callee, type;
      type = arg.type, callee = arg.callee;
      return type === 'CallExpression' && ((callee.type === 'Identifier' && callee.name === 'require') || (callee.type === 'MemberExpression' && callee.object.type === 'Identifier' && callee.object.name === 'require' && callee.property.type === 'Identifier' && callee.property.name === 'resolve'));
    };

    RequiredModuleFinder.prototype.normalizeModuleNames = function(arg) {
      var filePath, moduleNames;
      filePath = arg.filePath, moduleNames = arg.moduleNames;
      return _.chain(moduleNames).map(this.stripLoaders ? ModuleNameParser.stripLoaders : void 0).reject(ModuleNameParser.isBuiltIn).reject(ModuleNameParser.isRelative).map(ModuleNameParser.stripSubpath).map(function(name) {
        return {
          name: name,
          file: filePath
        };
      }).value();
    };

    return RequiredModuleFinder;

  })();

  module.exports = RequiredModuleFinder;

}).call(this);
