(function() {
  var ExecutedModuleFinder, RequiredModuleFinder, UsedModuleFinder, _, async, asyncHandlers,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  _ = require('lodash');

  async = require('async');

  asyncHandlers = require('async-handlers');

  ExecutedModuleFinder = require('./executed_module_finder');

  RequiredModuleFinder = require('./required_module_finder');

  UsedModuleFinder = (function() {
    function UsedModuleFinder(arg) {
      var ignoreFilePatterns, stripLoaders;
      ignoreFilePatterns = arg.ignoreFilePatterns, stripLoaders = arg.stripLoaders;
      this.find = bind(this.find, this);
      this.executedModuleFinder = new ExecutedModuleFinder;
      this.requiredModuleFinder = new RequiredModuleFinder({
        ignoreFilePatterns: ignoreFilePatterns,
        stripLoaders: stripLoaders
      });
    }

    UsedModuleFinder.prototype.find = function(dir, done) {
      return async.parallel([
        (function(_this) {
          return function(next) {
            return _this.requiredModuleFinder.find(dir, next);
          };
        })(this), (function(_this) {
          return function(next) {
            return _this.executedModuleFinder.find(dir, next);
          };
        })(this)
      ], asyncHandlers.transform(this.normalizeModules, done));
    };

    UsedModuleFinder.prototype.normalizeModules = function() {
      var file, i, len, modules, name, ref, ref1, result, script;
      modules = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      result = {};
      ref = _.flattenDeep(modules);
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], name = ref1.name, file = ref1.file, script = ref1.script;
        if (!result[name]) {
          result[name] = {
            name: name,
            files: [],
            scripts: []
          };
        }
        if (file) {
          result[name].files.push(file);
        }
        if (script) {
          result[name].scripts.push(script);
        }
      }
      return _.values(result);
    };

    return UsedModuleFinder;

  })();

  module.exports = UsedModuleFinder;

}).call(this);
