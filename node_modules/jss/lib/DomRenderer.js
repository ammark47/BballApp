/**
 * DOM rendering backend for StyleSheet.
 *
 * @api private
 */
'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var DomRenderer = (function () {
  DomRenderer.style = function style(element, name, value) {
    try {
      if (value == null) return element.style[name];
      element.style[name] = value;
    } catch (err) {
      // IE8 may throw if property is unknown.
    }
  };

  function DomRenderer(options) {
    _classCallCheck(this, DomRenderer);

    this.head = document.head || document.getElementsByTagName('head')[0];
    this.element = document.createElement('style');
    // IE8 will not have `styleSheet` prop without `type and `styleSheet.cssText`
    // is the only way to render on IE8.
    this.element.type = 'text/css';
    if (options.media) this.element.setAttribute('media', options.media);
    if (options.meta) this.element.setAttribute('data-meta', options.meta);
  }

  /**
   * Insert style element into render tree.
   *
   * @api private
   */

  DomRenderer.prototype.attach = function attach() {
    this.head.appendChild(this.element);
  };

  /**
   * Remove style element from render tree.
   *
   * @api private
   */

  DomRenderer.prototype.detach = function detach() {
    this.element.parentNode.removeChild(this.element);
  };

  /**
   * Inject CSS string into element.
   *
   * @param {String} cssStr
   * @api private
   */

  DomRenderer.prototype.deploy = function deploy(sheet) {
    var css = '\n' + sheet.toString() + '\n';
    if ('sheet' in this.element) this.element.innerHTML = css;
    // On IE8 the only way to render is `styleSheet.cssText`
    else if ('styleSheet' in this.element) this.element.styleSheet.cssText = css;
  };

  /**
   * Insert a rule into element.
   *
   * @param {Rule} rule
   * @return {CSSStyleRule}
   * @api private
   */

  DomRenderer.prototype.insertRule = function insertRule(rule) {
    // IE8 has only `styleSheet` and `styleSheet.rules`
    var sheet = this.element.sheet || this.element.styleSheet;
    var cssRules = sheet.cssRules || sheet.rules;
    var nextIndex = cssRules.length;
    if (sheet.insertRule) sheet.insertRule(rule.toString(), nextIndex);else sheet.addRule(rule.selector, rule.toString({ selector: false }), nextIndex);
    return cssRules[nextIndex];
  };

  /**
   * Get all rules elements.
   *
   * @return {Object} rules map, where key is selector, CSSStyleRule is value.
   * @api private
   */

  DomRenderer.prototype.getRules = function getRules() {
    // IE8 has only `styleSheet` and `styleSheet.rules`
    var sheet = this.element.sheet || this.element.styleSheet;
    var cssRules = sheet.rules || sheet.cssRules;
    var rules = Object.create(null);
    for (var index = 0; index < cssRules.length; index++) {
      var CSSRule = cssRules[index];
      rules[CSSRule.selectorText] = CSSRule;
    }
    return rules;
  };

  return DomRenderer;
})();

exports['default'] = DomRenderer;
module.exports = exports['default'];