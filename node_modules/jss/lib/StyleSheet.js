'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _createRule2 = require('./createRule');

var _createRule3 = _interopRequireDefault(_createRule2);

var _findRenderer = require('./findRenderer');

var _findRenderer2 = _interopRequireDefault(_findRenderer);

/**
 * StyleSheet model.
 *
 * Options:
 *
 *  - 'media' style element attribute
 *  - 'title' style element attribute
 *  - 'type' style element attribute
 *  - 'named' true by default - keys are names, selectors will be generated,
 *    if false - keys are global selectors
 *  - 'link' link renderable CSS rules with their corresponding models, false
 *    by default because fast by default
 *
 * @param {Object} [rules] object with selectors and declarations
 * @param {Object} [options]
 * @api public
 */

var StyleSheet = (function () {
  function StyleSheet(rules, options) {
    _classCallCheck(this, StyleSheet);

    this.options = _extends({}, options);
    if (this.options.named == null) this.options.named = true;
    this.rules = Object.create(null);
    this.classes = Object.create(null);
    this.attached = false;
    this.deployed = false;
    this.linked = false;

    var Renderer = _findRenderer2['default'](this.options);
    this.options.Renderer = Renderer;
    this.renderer = new Renderer(this.options);

    for (var _name in rules) {
      this.createRule(_name, rules[_name]);
    }
  }

  /**
   * Attach renderable to the render tree.
   *
   * @api public
   * @return {StyleSheet}
   */

  StyleSheet.prototype.attach = function attach() {
    if (this.attached) return this;
    if (!this.deployed) this.deploy();
    this.renderer.attach();
    if (!this.linked && this.options.link) this.link();
    this.attached = true;
    return this;
  };

  /**
   * Remove renderable from render tree.
   *
   * @return {StyleSheet}
   * @api public
   */

  StyleSheet.prototype.detach = function detach() {
    if (!this.attached) return this;
    this.renderer.detach();
    this.attached = false;
    return this;
  };

  /**
   * Add a rule to the current stylesheet. Will insert a rule also after the stylesheet
   * has been rendered first time.
   *
   * @param {Object} [name] can be selector or name if Â´options.named is true
   * @param {Object} style property/value hash
   * @return {Rule}
   * @api public
   */

  StyleSheet.prototype.addRule = function addRule(name, style) {
    var rule = this.createRule(name, style);
    // Don't insert rule directly if there is no stringified version yet.
    // It will be inserted all together when .attach is called.
    if (this.deployed) {
      var renderable = this.renderer.insertRule(rule);
      if (this.options.link) rule.renderable = renderable;
    }
    return rule;
  };

  /**
   * Create rules, will render also after stylesheet was rendered the first time.
   *
   * @param {Object} rules name:style hash.
   * @return {Array} array of added rules
   * @api public
   */

  StyleSheet.prototype.addRules = function addRules(rules) {
    var added = [];
    for (var _name2 in rules) {
      added.push(this.addRule(_name2, rules[_name2]));
    }
    return added;
  };

  /**
   * Get a rule.
   *
   * @param {String} name can be selector or name if `named` option is true.
   * @return {Rule}
   * @api public
   */

  StyleSheet.prototype.getRule = function getRule(name) {
    return this.rules[name];
  };

  /**
   * Convert rules to a CSS string.
   *
   * @param {Object} options
   * @return {String}
   * @api public
   */

  StyleSheet.prototype.toString = function toString(options) {
    var rules = this.rules;

    var stringified = Object.create(null);
    var str = '';
    for (var _name3 in rules) {
      var rule = rules[_name3];
      // We have the same rule referenced twice if using named rules.
      // By name and by selector.
      if (stringified[rule.id]) {
        continue;
      }
      if (str) str += '\n';
      str += rules[_name3].toString(options);
      stringified[rule.id] = true;
    }
    return str;
  };

  /**
   * Create a rule, will not render after stylesheet was rendered the first time.
   * Will link the rule in `this.rules`.
   *
   * @see createRule
   * @api private
   */

  StyleSheet.prototype.createRule = function createRule(name, style, options) {
    options = _extends({}, options, {
      sheet: this,
      jss: this.options.jss,
      Renderer: this.options.Renderer
    });
    // Scope options overwrite instance options.
    if (options.named == null) options.named = this.options.named;
    var rule = _createRule3['default'](name, style, options);
    // Register conditional rule, it will stringify it's child rules properly.
    if (rule.type === 'conditional') {
      this.rules[rule.selector] = rule;
    } else if (rule.type === 'simple') {
      this.rules[rule.name] = rule;
    }
    // This is a rule which is a child of a condtional rule.
    // We need to register its class name only.
    else if (rule.options.parent && rule.options.parent.type === 'conditional') {
        // Only named rules should be referenced in `classes`.
        if (rule.options.named) this.classes[name] = rule.className;
      } else {
        this.rules[rule.selector] = rule;
        if (options.named) {
          this.rules[name] = rule;
          this.classes[name] = rule.className;
        }
      }
    options.jss.plugins.run(rule);
    return rule;
  };

  /**
   * Deploy pure CSS string to a renderable.
   *
   * @return {StyleSheet}
   * @api private
   */

  StyleSheet.prototype.deploy = function deploy() {
    this.renderer.deploy(this);
    this.deployed = true;
    return this;
  };

  /**
   * Link renderable CSS rules with their corresponding models.
   *
   * @return {StyleSheet}
   * @api private
   */

  StyleSheet.prototype.link = function link() {
    var renderables = this.renderer.getRules();
    for (var selector in renderables) {
      var rule = this.rules[selector];
      if (rule) rule.renderable = renderables[selector];
    }
    this.linked = true;
    return this;
  };

  return StyleSheet;
})();

exports['default'] = StyleSheet;
module.exports = exports['default'];