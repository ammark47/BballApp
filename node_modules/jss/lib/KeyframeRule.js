'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _uid = require('./uid');

var uid = _interopRequireWildcard(_uid);

/**
 * Keyframe rule.
 *
 * @api private
 */

var KeyframeRule = (function () {
  function KeyframeRule(selector, frames, options) {
    _classCallCheck(this, KeyframeRule);

    this.id = uid.get();
    this.type = 'keyframe';
    this.selector = selector;
    this.options = options;
    this.frames = this.formatFrames(frames);
  }

  /**
   * Creates formatted frames where every frame value is a rule instance.
   *
   * @api private
   */

  KeyframeRule.prototype.formatFrames = function formatFrames(frames) {
    var newFrames = Object.create(null);
    for (var _name in frames) {
      var options = _extends({}, this.options, { named: false, parent: this });
      newFrames[_name] = this.options.jss.createRule(_name, frames[_name], options);
    }
    return newFrames;
  };

  /**
   * Generates a CSS string.
   *
   * @return {String}
   * @api private
   */

  KeyframeRule.prototype.toString = function toString() {
    var str = this.selector + ' {\n';
    var options = { indentationLevel: 1 };
    for (var _name2 in this.frames) {
      str += this.frames[_name2].toString(options) + '\n';
    }
    str += '}';
    return str;
  };

  return KeyframeRule;
})();

exports['default'] = KeyframeRule;
module.exports = exports['default'];