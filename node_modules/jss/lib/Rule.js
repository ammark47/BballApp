'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _uid = require('./uid');

var uid = _interopRequireWildcard(_uid);

var _clone = require('./clone');

var _clone2 = _interopRequireDefault(_clone);

/**
 * Regular rules and font-face.
 *
 * @api private
 */

var Rule = (function () {
  function Rule(selector, style, options) {
    _classCallCheck(this, Rule);

    this.id = uid.get();
    this.type = 'regular';
    this.options = options;
    this.selector = selector;
    if (options.named) {
      this.name = selector;
      this.className = options.className || (this.name ? this.name + '--' + this.id : this.id);
      this.selector = '.' + this.className;
    }
    this.originalStyle = style;
    // We expect style to be plain object.
    this.style = _clone2['default'](style);
  }

  /**
   * Indent a string.
   *
   * http://jsperf.com/array-join-vs-for
   *
   * @param {Number} level
   * @param {String} str
   * @return {String}
   * @api private
   */

  /**
   * Get or set a style property.
   *
   * @param {String} name
   * @param {String|Number} [value]
   * @return {Rule|String|Number}
   * @api public
   */

  Rule.prototype.prop = function prop(name, value) {
    var style = this.options.Renderer.style;

    // Its a setter.
    if (value != null) {
      this.style[name] = value;
      // If linked option in StyleSheet is not passed, renderable is not defined.
      if (this.renderable) style(this.renderable, name, value);
      return this;
    }
    // Its a getter, read the value from the DOM if its not cached.
    if (this.renderable && this.style[name] == null) {
      // Cache the value after we have got it from the DOM once.
      this.style[name] = style(this.renderable, name);
    }
    return this.style[name];
  };

  /**
   * Apply rule to an element inline.
   *
   * @param {Element} renderable
   * @return {Rule}
   * @api public
   */

  Rule.prototype.applyTo = function applyTo(renderable) {
    for (var prop in this.style) {
      var value = this.style[prop];
      var style = this.options.Renderer.style;

      if (Array.isArray(value)) {
        for (var index = 0; index < value.length; index++) {
          style(renderable, prop, value[index]);
        }
      } else style(renderable, prop, value);
    }
    return this;
  };

  /**
   * Returns JSON representation of the rule.
   * Nested rules, at-rules and array values are not supported.
   *
   * @return {Object}
   * @api public
   */

  Rule.prototype.toJSON = function toJSON() {
    var style = Object.create(null);
    for (var prop in this.style) {
      if (typeof this.style[prop] != 'object') {
        style[prop] = this.style[prop];
      }
    }
    return style;
  };

  /**
   * Generates a CSS string.
   *
   * @param {Object} options
   * @return {String}
   * @api private
   */

  Rule.prototype.toString = function toString() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var selector = options.selector == null ? true : options.selector;
    var indentationLevel = options.indentationLevel || 0;
    var str = '';
    if (selector) {
      str += indent(indentationLevel, this.selector + ' {');
      indentationLevel++;
    }
    for (var prop in this.style) {
      var value = this.style[prop];
      // We want to generate multiple style with identical property names.
      if (Array.isArray(value)) {
        for (var index = 0; index < value.length; index++) {
          str += '\n' + indent(indentationLevel, prop + ': ' + value[index] + ';');
        }
      } else str += '\n' + indent(indentationLevel, prop + ': ' + value + ';');
    }
    if (selector) str += '\n' + indent(--indentationLevel, '}');
    return str;
  };

  return Rule;
})();

exports['default'] = Rule;
function indent(level, str) {
  var indentStr = '';
  for (var index = 0; index < level; index++) {
    indentStr += '  ';
  }return indentStr + str;
}
module.exports = exports['default'];