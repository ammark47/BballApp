// Generated by CoffeeScript 1.7.1
(function() {
  var Animation, curves, helpers,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  curves = require('curves');

  helpers = require('helpers');

  Animation = (function() {
    function Animation(currentStyle, properties, options) {
      this.complete = __bind(this.complete, this);
      this.change = __bind(this.change, this);
      this.duration = __bind(this.duration, this);
      this.timeLeft = __bind(this.timeLeft, this);
      this.frame = __bind(this.frame, this);
      var k, v;
      this.currentStyle = {};
      for (k in currentStyle) {
        v = currentStyle[k];
        this.currentStyle[k] = v;
      }
      this.properties = helpers.parseProperties(properties);
      this.options = options;
      this.curve = new this.options.type(this.options);
      this.time = 0;
    }

    Animation.prototype.frame = function(ts) {
      var current, frame, property, t, value, _ref;
      this.time += ts;
      t = this.time / this.duration();
      if (t > 1) {
        t = 1;
      }
      frame = {};
      _ref = this.properties;
      for (property in _ref) {
        value = _ref[property];
        current = this.currentStyle[property];
        frame[property] = current + (this.curve.at(t)[1] * (value - current));
      }
      return frame;
    };

    Animation.prototype.timeLeft = function() {
      return Math.max(0, this.duration() - this.time);
    };

    Animation.prototype.duration = function() {
      return this.curve.options.duration;
    };

    Animation.prototype.change = function() {
      var _base;
      return typeof (_base = this.options).change === "function" ? _base.change() : void 0;
    };

    Animation.prototype.complete = function() {
      var _base;
      return typeof (_base = this.options).complete === "function" ? _base.complete() : void 0;
    };

    return Animation;

  })();

  module.exports = Animation;

}).call(this);
