// Generated by CoffeeScript 1.7.1
(function() {
  var Animation, Animations, helpers,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Animation = require('animation');

  helpers = require('helpers');

  Animations = (function() {
    function Animations(arr, style) {
      this.complete = __bind(this.complete, this);
      this.change = __bind(this.change, this);
      this.duration = __bind(this.duration, this);
      this.timeLeft = __bind(this.timeLeft, this);
      this.frame = __bind(this.frame, this);
      var animation, animationArr, axis, frame, property, transformKeys, type, value, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      this.style = style;
      this.animations = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        animationArr = arr[_i];
        animation = new Animation(style, animationArr[0], animationArr[1]);
        this.animations.push(animation);
      }
      frame = this.animations[0].frame(0);
      transformKeys = [];
      for (property in frame) {
        value = frame[property];
        if (helpers.transformProperties.contains(property)) {
          transformKeys.push(property);
        }
      }
      this.initialTransform = [];
      _ref = ['translate', 'scale', 'skew', 'perspective', 'rotate'];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        type = _ref[_j];
        _ref1 = ['X', 'Y', 'Z'];
        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
          axis = _ref1[_k];
          if (axis === 'Z' && (type === 'skew' || type === 'perspective')) {
            continue;
          }
          property = type + axis;
          if (transformKeys.indexOf(property) === -1) {
            value = this.style[property];
            if (helpers.isDefaultValueForProperty(property, value)) {
              continue;
            }
            this.initialTransform.push(helpers.transformValueForProperty(property, value));
          }
        }
      }
    }

    Animations.prototype.frame = function(ts) {
      var frame, newFrame, property, transform, unit, value;
      frame = this.animations[0].frame(ts);
      return frame;
      newFrame = {};
      transform = this.initialTransform.slice();
      for (property in frame) {
        value = frame[property];
        if (helpers.transformProperties.contains(property)) {
          transform.push(helpers.transformValueForProperty(property, value));
        } else {
          if (Math.abs(value) < 0.0000001) {
            value = 0;
          }
          unit = helpers.unitForProperty(property, value);
          newFrame[helpers.support.propertyWithPrefix(property)] = value + unit;
        }
      }
      if (transform.length > this.initialTransform.length) {
        newFrame[helpers.support.propertyWithPrefix("transform")] = transform.join(' ');
      }
      return newFrame;
    };

    Animations.prototype.timeLeft = function() {
      var animation, times, _i, _len, _ref;
      times = [];
      _ref = this.animations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        animation = _ref[_i];
        times.push(animation.timeLeft());
      }
      return Math.max.apply(Math, times);
    };

    Animations.prototype.duration = function() {
      var animation, durations, _i, _len, _ref;
      durations = [];
      _ref = this.animations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        animation = _ref[_i];
        durations.push(animation.duration());
      }
      return Math.max.apply(Math, durations);
    };

    Animations.prototype.change = function() {
      var animation, _i, _len, _ref, _results;
      _ref = this.animations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        animation = _ref[_i];
        _results.push(animation.change());
      }
      return _results;
    };

    Animations.prototype.complete = function() {
      var animation, _i, _len, _ref, _results;
      _ref = this.animations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        animation = _ref[_i];
        _results.push(animation.complete());
      }
      return _results;
    };

    return Animations;

  })();

  module.exports = Animations;

}).call(this);
